##Make multiple battleships: you’ll need to be careful because you need to make sure that you don’t place battleships on top of each other on the game board. You’ll also want to make sure that you balance the size of the board with the number of ships so the game is still challenging and fun to play.
##Make battleships of different sizes: this is trickier than it sounds. All the parts of the battleship need to be vertically or horizontally touching and you’ll need to make sure you don’t accidentally place part of a ship off the side of the board.
##Make your game a two-player game.
##Use functions to allow your game to have more features like rematches, statistics and more!from random 

from random import randint
##Board Set up
board = []
answer_board=[]
ship_5=[]
ship_4=[]
ship_3=[]
ship_2=[]
battleships_left = [2,3,4,5]
battle_ship_locations =[]

for x in range(1, 10):
    board.append(["."] * 9)
    answer_board.append(["."] * 9)

def print_board(turn):
   for row in board:
     print " ".join(row)

def print_answer_board(test):
  for rows in answer_board:
    print " ".join(rows)

##Battle Ship 5 Placement
def battleship_5(board_input):
  size=5
  x1 = randint(1,len(board)-4)
  y1=randint(1,len(board)-4)
  ship_5.append([x1,y1])
  direction=randint(1,2)

  if direction==1:
    for i in range(1,size):
      ship_5.append([x1+i,y1])
  else:
    for i in range(1,size):
      ship_5.append([x1,y1+i])
  for coordinate_pair in ship_5:
      answer_board[abs(coordinate_pair[1]-9)][coordinate_pair[0]-1]='5'

  battle_ship_locations.extend(ship_5)
  # print ship_5
  return(ship_5)
  return battle_ship_locations
  return answer_board


##Battle Ship 4 Placement
def battleship_4(board_input):
  size=4
  continuee='False'
  while continuee == 'False':
    ship_4=[]
    x1 = randint(1,len(board)-3)
    y1=randint(1,len(board)-3)
    ship_4.append([x1,y1])
    direction=randint(1,2)
    if direction==1:
      for i in range(1,size):
        ship_4.append([x1+i,y1])
    else:
      for i in range(1,size):
        ship_4.append([x1,y1+i])
    for i in range(len(battle_ship_locations)):
      for temp in ship_4:
        if temp==battle_ship_locations[i]:
          print temp, battle_ship_locations[i]
          continuee = 'False'
        else:
          continuee = 'True'
          for coordinate_pair in ship_4:
            answer_board[abs(coordinate_pair[1]-9)][coordinate_pair[0]-1]='4'
  # print 'Ship 4: ',ship_4
  return(ship_4)
  battle_ship_locations.extend(ship_4)
  return battle_ship_locations
  return answer_board

##Battle Ship 3
def battleship_3(board_input):
  size=3
  continuee='False'
  while continuee == 'False':
    ship_3=[]
    x1 = randint(1,len(board)-2)
    y1=randint(1,len(board)-2)
    ship_3.append([x1,y1])
    direction=randint(1,2)
    if direction==1:
      for i in range(1,size):
        ship_3.append([x1+i,y1])
    else:
      for i in range(1,size):
        ship_3.append([x1,y1+i])
    for i in range(len(battle_ship_locations)):
      for temp in ship_3:
        if temp==battle_ship_locations[i]:
          print temp, battle_ship_locations[i]
          continuee = 'False'
        else:
          continuee = 'True'
          for coordinate_pair in ship_3:
            answer_board[abs(coordinate_pair[1]-12)][coordinate_pair[0]-1]='3'
  # print 'Ship 3: ',ship_3
  return(ship_3)
  battle_ship_locations.extend(ship_3)
  return battle_ship_locations
  return answer_board
  

battleship_5(board)
battleship_4(board)
battleship_3(board)
print(print_answer_board(board))


# for turn in range(4):
#   print "Turn", turn + 1
#   guess_row = int(raw_input("Guess Row: "))
#   guess_col = int(raw_input("Guess Col: "))

#   if guess_row == ship_row and guess_col == ship_col:
#     print "Congratulations! You sank my battleship!"
#     break   
#   else:
#     if guess_row not in range(5) or \
#       guess_col not in range(5):
#       print "Oops, that's not even in the ocean."
#     elif board[guess_row][guess_col] == "X":
#       print( "You guessed that one already." )
#     else:
#       print "You missed my battleship!"
#       board[guess_row][guess_col] = "X"
#     if (turn == 3):
#       print "Game Over"
# 
# print_board(board)




